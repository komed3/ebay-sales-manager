import{cwd}from"./config.js";import{readFileSync,writeFileSync}from"node:fs";import{join}from"node:path";import deepmerge from"deepmerge";import fetch from"node-fetch";import{v4 as uuidv4}from"uuid";const ordersFile=join(cwd,"data/orders.json"),calendarFile=join(cwd,"data/calendar.json"),statsFile=join(cwd,"data/stats.json"),annualReportsFile=join(cwd,"data/annualReports.json"),reportsFile=join(cwd,"data/reports.json");function numberOrAny(e){const t=Number(e);return["",null,void 0].includes(e)||isNaN(t)||Math.abs(t)>9999?e:t}function expandDotNotation(e){const t={};for(const[r,o]of Object.entries(e))if(r.includes(".")){const e=r.split(".");let n=t;for(let t=0;t<e.length;t++){const r=e[t];t===e.length-1?n[r]=numberOrAny(o):("object"==typeof n[r]&&null!==n[r]||(n[r]={}),n=n[r])}}else t[r]=numberOrAny(o);return t}function mergeFields(e){if(!e)return[];const t=[...new Set(Object.keys(e).map((e=>e.replace(/\[\d+\]/,""))))],r=[];let o=0;for(;;){let n={};for(const r of t)""!=e[`${r}[${o}]`]&&(n[r]=numberOrAny(e[`${r}[${o}]`]));if(!Object.keys(n).length)return r;r.push(n),o++}}export async function getCoordinates(e){if(!e||""===e.trim())return null;const t=`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(e)}&format=json&limit=1`;try{const e=await fetch(t,{headers:{"User-Agent":"OrderManager/1.0 (example@example.com)"}});if(!e.ok)return null;const r=await e.json();if(0===r.length)return null;const{lat:o,lon:n}=r[0];return{lat:parseFloat(o),lon:parseFloat(n)}}catch{return null}}export function sanitizeData(e){const t=expandDotNotation(e);return t.article=mergeFields(t.article),t}export function getOrders(){return JSON.parse(readFileSync(ordersFile,"utf8")||"[]")}export function filterOrders(e){const{offset:t=0,limit:r=32,search:o="",from:n="1900-01-01",to:i="2100-12-31"}=expandDotNotation(e??{}),a=getOrders().filter((e=>JSON.stringify(e).match(new RegExp(o,"i"))&&new Date(e.orderDate).getTime()>=new Date(n).getTime()&&new Date(e.orderDate).getTime()<=new Date(i).getTime())),u=a.slice(t,t+r);return{results:u,count:u.length,max:a.length}}export function getOrder(e){return getOrders().find((t=>t.__uuid===e))||null}export function isOrder(e){return e&&"object"==typeof e&&e.__uuid}export async function updateOrder(e,t){const r=sanitizeData(e),o=getOrders(),n=o.findIndex((e=>e.__uuid==r.__uuid))??null,i=(new Date).toISOString();if(t?.invoicePDF?.size){const e=`${uuidv4()}.pdf`,o=join(cwd,"data/upload",e);t.invoicePDF.mv(o),r.invoicePDF=e}if(r.__updated=i,n>=0)o[n]=deepmerge(o[n],r,{arrayMerge:(e,t)=>t});else{const e=await getCoordinates([r.customer?.address?.street,r.customer?.address?.zipCode,r.customer?.address?.city].filter(Boolean).join(", "));o.push({...r,__created:i,__uuid:uuidv4(),location:e})}return writeFileSync(ordersFile,JSON.stringify(o,null,2),"utf8"),updateOrderStats(),r.__uuid}export function getOrderStats(){return JSON.parse(readFileSync(statsFile,"utf8"))}export function getOrderDates(){return JSON.parse(readFileSync(calendarFile,"utf8"))}export function getAnnualReports(){return JSON.parse(readFileSync(annualReportsFile,"utf8"))}export function getReports(){return JSON.parse(readFileSync(reportsFile,"utf8"))}export function updateOrderStats(){const e=getOrders(),t=new Set,r=new Set,o={orderCount:0,customerCount:0,shippingCount:0,pickupCount:0,totalRevenue:0,shippingRevenue:0,pickupRevenue:0,totalShipping:0,totalFees:0,totalRefund:0,totalProfit:0,totalItems:0},n={},i={};let a;e.forEach((e=>{r.add(e.orderDate),o.orderCount++,o.totalRevenue+=Number(e.revenue),o.totalShipping+=Number(e.shipping),o.totalFees+=Number(e.fees),o.totalRefund+=Number(e.refund),o.totalProfit+=Number(e.profit),o[`${e.orderType}Count`]++,o[`${e.orderType}Revenue`]+=Number(e.revenue),e.article&&Array.isArray(e.article)&&(o.totalItems+=e.article.reduce(((e,t)=>e+(Number(t.quantity)||0)),0)),t.has(e.customer.nick)||(o.customerCount++,t.add(e.customer.nick));const u=new Date(e.orderDate),s=u.getFullYear(),l=`${s}-${String(u.getMonth()+1).padStart(2,"0")}`;n[l]||(n[l]={orderCount:0,totalRevenue:0,totalShipping:0,totalFees:0,totalRefund:0,totalProfit:0}),a=n[l],a.orderCount++,a.totalRevenue+=Number(e.revenue),a.totalShipping+=Number(e.shipping),a.totalFees+=Number(e.fees),a.totalRefund+=Number(e.refund),a.totalProfit+=Number(e.profit),i[s]||(i[s]={orderCount:0,totalRevenue:0,totalShipping:0,totalFees:0,totalRefund:0,totalProfit:0}),a=i[s],a.orderCount++,a.totalRevenue+=Number(e.revenue),a.totalShipping+=Number(e.shipping),a.totalFees+=Number(e.fees),a.totalRefund+=Number(e.refund),a.totalProfit+=Number(e.profit)})),o.orderCount&&(o.averageRevenue=o.totalRevenue/o.orderCount,o.averageShipping=o.totalShipping/o.orderCount,o.averageFees=o.totalFees/o.orderCount,o.averageRefund=o.totalRefund/o.orderCount,o.averageProfit=o.totalProfit/o.orderCount,o.averageItems=o.totalItems/o.orderCount,o.averageItemPrice=(o.totalRevenue-o.totalShipping)/o.totalItems,o.profitMargin=o.totalProfit/o.totalRevenue*100);for(const[e,t]of Object.entries(o))o[e]=Number(Number(t).toFixed(2));for(const e of Object.values(n)){e.profitMargin=e.totalProfit/e.totalRevenue*100;for(const[t,r]of Object.entries(e))e[t]=Number(Number(r).toFixed(2))}for(const e of Object.values(i)){e.profitMargin=e.totalProfit/e.totalRevenue*100;for(const[t,r]of Object.entries(e))e[t]=Number(Number(r).toFixed(2))}const u=Object.fromEntries(Object.entries(n).sort((([e],[t])=>e.localeCompare(t)))),s=Object.fromEntries(Object.entries(i).sort((([e],[t])=>e.localeCompare(t))));writeFileSync(calendarFile,JSON.stringify([...r],null,2),"utf8"),writeFileSync(statsFile,JSON.stringify(o,null,2),"utf8"),writeFileSync(annualReportsFile,JSON.stringify(s,null,2),"utf8"),writeFileSync(reportsFile,JSON.stringify(u,null,2),"utf8")}